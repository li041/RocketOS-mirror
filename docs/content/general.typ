= 概述
== RocketOS内核整体设计

RocketOS 是一款采用 Rust 语言开发的现代化宏内核操作系统，原生支持 RISC-V 和 LoongArch 两种主流处理器架构。该系统采用同步栈式设计架构，集成了完整的中断处理机制、进程管理系统、内存管理模块、文件系统以及网络协议栈等核心组件，通过系统调用接口为用户程序提供高效可靠的服务支持，详细结构如#[@fig:系统架构] 所示。RocketOS 充分利用 Rust 语言的内存安全特性和零成本抽象能力，在保证系统稳定性的同时实现了出色的内核性能表现，为现代计算环境提供了一个安全、高效、可扩展的操作系统解决方案。

#figure(
  image("img/RocketOS内核架构图.drawio.png", width: 90%),
  caption: [RocketOS内核架构图],
)<系统架构>

== RocketOS当前工作

截至2025年8月12日，RocketOS 已经实现了以下核心功能模块：
#pad(left: 3em)[
- 内存管理模块，提供高效的内存分配和虚拟内存
- 文件系统，支持多种文件操作和目录管理
- 完善的信号机制，支持进程间的信号传递和处理
- 进程管理系统，支持多任务调度和进程间通信
- 网络协议栈，支持 TCP/IP 协议和基本网络通信
- eBPF 框架，支持用户态程序的动态加载和执行
- 硬件平台适配，实现VisionFive2与龙芯2k1000开发板的适配与支持
]

#h(2em)截至2025-8-17日23点，RocketOS通过除ltp外全部测试点，在实时排行榜中位于第二名，总分共计16672.9033

#figure(
  image("img/队伍成绩1.png", width: 90%),
  caption: [RocketOS实时排行榜成绩],
)<score-1>

#figure(
  image("img/队伍成绩2.png", width: 90%),
  caption: [RocketOS实时排行榜成绩],
)<score-2>

== 成员分工

**李昕昊（队长）：** 负责系统内存的分配与回收，管理文件的存储与访问，兼容RISC-V、LoongArch架构，构建 eBPF 框架，保障系统资源高效与稳定运行。

**翁浩男：** 负责进程的创建、调度与销毁，管理进程间的通信与同步；实现信号机制以支持异步事件通知与处理；提供多优先级与 CFS 多核调度，确保系统并发性能与响应能力。

**沈翃宇：** 实现网络协议栈，负责数据包的收发与处理，支持多种网络通信协议；完善适配 VisionFive2 与 2K1000 网卡驱动，确保内核与外部网络的高效互联与稳定传输。

#pagebreak()
