= 总结与展望
== 当前工作总结

截至2025年8月12日，RocketOS 已构建起完整的操作系统核心架构，成功实现了内存管理模块的高效内存分配与虚拟内存机制，建立了支持多种文件操作和目录管理的文件系统，完善了进程间信号传递与处理的信号机制，部署了具备多任务调度和进程间通信能力的进程管理系统，集成了支持 TCP/IP 协议的网络协议栈以实现基本网络通信功能，构建了支持用户态程序动态加载与执行的eBPF框架，并实现了VisionFive2与龙芯2k1000开发板的硬件平台适配与支持。这些核心模块的成功实现为 RocketOS 奠定了坚实的系统基础，展现了其作为现代化操作系统的完整性和实用性，同时通过eBPF框架的动态加载能力和跨硬件平台的适配支持，进一步增强了系统的可扩展性与硬件兼容性。

== 经验与教训

在 RocketOS 的开发过程中，我们遇到了多项具体的技术挑战和困难。

首先，双架构适配成为最大的技术难点，RISC-V 和 LoongArch 在指令集、内存模型和中断处理机制上存在显著差异，这要求我们重新设计硬件抽象层，并为每个架构编写专门的底层代码。

其次，内存管理模块的实现比预期复杂，特别是在处理不同架构的页表结构和虚拟内存映射时，需要大量的调试工作来确保内存分配的正确性和效率。在 RocketOS 的内存管理优化中，我们实施了批处理、懒分配和写时复制等关键策略。批处理分配通过预分配内存池减少了频繁分配的开销。懒分配策略延迟物理内存分配直到实际使用，有效降低了内存占用，但增加了页面错误处理的复杂性，特别是在不同架构间的页表管理差异使实现变得困难。写时复制机制在进程创建时显著减少了内存复制开销，但其实现需要复杂的页面权限管理和写保护异常处理。

同时，调试工具的缺乏使得问题定位变得困难，特别是在处理底层硬件相关的错误时，往往需要依靠日志输出和手动分析来排查问题。这些困难虽然增加了开发复杂度，但也促使团队在系统架构设计和问题解决能力方面获得了显著提升。

== 未来工作展望
在之后的工作中，我们计划继续完善 RocketOS 的功能和性能，主要包括以下几个方面：
#pad(left: 2em)[
+ 支持更多 ltp 测例，修复更多内核不稳定的 bug。
+ 扩展 eBPF 框架应用场景，支持网络过滤与系统调用监控
+ 完善文件系统，支持更多文件操作。
+ 完善网络协议栈，支持更多网络功能。
+ 支持图形界面
]