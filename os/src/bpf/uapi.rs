use alloc::vec::Vec;
use num_enum::FromPrimitive;

use crate::{fs::file::FileOp, syscall::errno::Errno};

#[derive(Debug)]
pub enum BpfCmd {
    BpfMapCreate,
    BpfMapLookupElem,
    BpfMapUpdateElem,
    BpfMapDeleteElem,
    BpfMapGetNextKey,
    BpfProgLoad,
    BpfObjPin,
    BpfObjGet,
    BpfProgAttach,
    BpfProgDetach,
    // BpfProgTestRun,
    BpfProgRun,
    BpfProgGetNextId,
    BpfMapGetNextId,
    BpfProgGetFdById,
    BpfMapGetFdById,
    BpfObjGetInfoByFd,
    BpfProgQuery,
    BpfRawTracepointOpen,
    BpfBtfLoad,
    BpfBtfGetFdById,
    BpfTaskFdQuery,
    BpfMapLookupAndDeleteElem,
    BpfMapFreeze,
    BpfBtfGetNextId,
    BpfMapLookupBatch,
    BpfMapLookupAndDeleteBatch,
    BpfMapUpdateBatch,
    BpfMapDeleteBatch,
    BpfLinkCreate,
    BpfLinkUpdate,
    BpfLinkGetFdById,
    BpfLinkGetNextId,
    BpfEnableStats,
    BpfIterCreate,
    BpfLinkDetach,
    BpfProgBindMap,
}

impl TryFrom<i32> for BpfCmd {
    type Error = Errno;

    fn try_from(value: i32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(BpfCmd::BpfMapCreate),
            1 => Ok(BpfCmd::BpfMapLookupElem),
            2 => Ok(BpfCmd::BpfMapUpdateElem),
            3 => Ok(BpfCmd::BpfMapDeleteElem),
            4 => Ok(BpfCmd::BpfMapGetNextKey),
            5 => Ok(BpfCmd::BpfProgLoad),
            6 => Ok(BpfCmd::BpfObjPin),
            7 => Ok(BpfCmd::BpfObjGet),
            8 => Ok(BpfCmd::BpfProgAttach),
            9 => Ok(BpfCmd::BpfProgDetach),
            // 10 => Ok(BpfCmd::BpfProcTestRun),
            10 => Ok(BpfCmd::BpfProgRun),
            11 => Ok(BpfCmd::BpfProgGetNextId),
            12 => Ok(BpfCmd::BpfMapGetNextId),
            13 => Ok(BpfCmd::BpfProgGetFdById),
            14 => Ok(BpfCmd::BpfMapGetFdById),
            15 => Ok(BpfCmd::BpfObjGetInfoByFd),
            16 => Ok(BpfCmd::BpfProgQuery),
            17 => Ok(BpfCmd::BpfRawTracepointOpen),
            18 => Ok(BpfCmd::BpfBtfLoad),
            19 => Ok(BpfCmd::BpfBtfGetFdById),
            20 => Ok(BpfCmd::BpfTaskFdQuery),
            21 => Ok(BpfCmd::BpfMapLookupAndDeleteElem),
            22 => Ok(BpfCmd::BpfMapFreeze),
            23 => Ok(BpfCmd::BpfBtfGetNextId),
            24 => Ok(BpfCmd::BpfMapLookupBatch),
            25 => Ok(BpfCmd::BpfMapLookupAndDeleteBatch),
            26 => Ok(BpfCmd::BpfMapUpdateBatch),
            27 => Ok(BpfCmd::BpfMapDeleteBatch),
            28 => Ok(BpfCmd::BpfLinkCreate),
            29 => Ok(BpfCmd::BpfLinkUpdate),
            30 => Ok(BpfCmd::BpfLinkGetFdById),
            31 => Ok(BpfCmd::BpfLinkGetNextId),
            32 => Ok(BpfCmd::BpfEnableStats),
            33 => Ok(BpfCmd::BpfIterCreate),
            34 => Ok(BpfCmd::BpfLinkDetach),
            35 => Ok(BpfCmd::BpfProgBindMap),
            _ => Err(Errno::EINVAL),
        }
    }
}

// Todo:
pub struct BtfObject {
    pub data: Vec<u8>, // 原始 BTF 数据
}

impl FileOp for BtfObject {}

#[repr(u32)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, FromPrimitive)]
pub enum BpfFuncId {
    #[default]
    Unspec = 0,
    MapLookupElem,
    MapUpdateElem,
    MapDeleteElem,
    ProbeRead,
    KtimeGetNs,
    TracePrintk,
    GetPrandomU32,
    GetSmpProcessorId,
    SkbStoreBytes,
    L3CsumReplace,
    L4CsumReplace,
    TailCall,
    CloneRedirect,
    GetCurrentPidTgid,
    GetCurrentUidGid,
    GetCurrentComm,
    GetCgroupClassid,
    SkbVlanPush,
    SkbVlanPop,
    SkbGetTunnelKey,
    SkbSetTunnelKey,
    PerfEventRead,
    Redirect,
    GetRouteRealm,
    PerfEventOutput,
    SkbLoadBytes,
    GetStackid,
    CsumDiff,
    SkbGetTunnelOpt,
    SkbSetTunnelOpt,
    SkbChangeProto,
    SkbChangeType,
    SkbUnderCgroup,
    GetHashRecalc,
    GetCurrentTask,
    ProbeWriteUser,
    CurrentTaskUnderCgroup,
    SkbChangeTail,
    SkbPullData,
    CsumUpdate,
    SetHashInvalid,
    GetNumaNodeId,
    SkbChangeHead,
    XdpAdjustHead,
    ProbeReadStr,
    GetSocketCookie,
    GetSocketUid,
    SetHash,
    Setsockopt,
    SkbAdjustRoom,
    RedirectMap,
    SkRedirectMap,
    SockMapUpdate,
    XdpAdjustMeta,
    PerfEventReadValue,
    PerfProgReadValue,
    Getsockopt,
    OverrideReturn,
    SockOpsCbFlagsSet,
    MsgRedirectMap,
    MsgApplyBytes,
    MsgCorkBytes,
    MsgPullData,
    Bind,
    XdpAdjustTail,
    SkbGetXfrmState,
    GetStack,
    SkbLoadBytesRelative,
    FibLookup,
    SockHashUpdate,
    MsgRedirectHash,
    SkRedirectHash,
    LwtPushEncap,
    LwtSeg6StoreBytes,
    LwtSeg6AdjustSrh,
    LwtSeg6Action,
    RcRepeat,
    RcKeydown,
    SkbCgroupId,
    GetCurrentCgroupId,
    GetLocalStorage,
    SkSelectReuseport,
    SkbAncestorCgroupId,
    SkLookupTcp,
    SkLookupUdp,
    SkRelease,
    MapPushElem,
    MapPopElem,
    MapPeekElem,
    MsgPushData,
    MsgPopData,
    RcPointerRel,
    SpinLock,
    SpinUnlock,
    SkFullsock,
    TcpSock,
    SkbEcnSetCe,
    GetListenerSock,
    SkcLookupTcp,
    TcpCheckSyncookie,
    SysctlGetName,
    SysctlGetCurrentValue,
    SysctlGetNewValue,
    SysctlSetNewValue,
    Strtol,
    Strtoul,
    SkStorageGet,
    SkStorageDelete,
    SendSignal,
    TcpGenSyncookie,
    SkbOutput,
    ProbeReadUser,
    ProbeReadKernel,
    ProbeReadUserStr,
    ProbeReadKernelStr,
    TcpSendAck,
    SendSignalThread,
    Jiffies64,
    ReadBranchRecords,
    GetNsCurrentPidTgid,
    XdpOutput,
    GetNetnsCookie,
    GetCurrentAncestorCgroupId,
    SkAssign,
    KtimeGetBootNs,
    SeqPrintf,
    SeqWrite,
    SkCgroupId,
    SkAncestorCgroupId,
    RingbufOutput,
    RingbufReserve,
    RingbufSubmit,
    RingbufDiscard,
    RingbufQuery,
    CsumLevel,
    SkcToTcp6Sock,
    SkcToTcpSock,
    SkcToTcpTimewaitSock,
    SkcToTcpRequestSock,
    SkcToUdp6Sock,
    GetTaskStack,
    LoadHdrOpt,
    StoreHdrOpt,
    ReserveHdrOpt,
    InodeStorageGet,
    InodeStorageDelete,
    DPath,
    CopyFromUser,
    SnprintfBtf,
    SeqPrintfBtf,
    SkbCgroupClassid,
    RedirectNeigh,
    PerCpuPtr,
    ThisCpuPtr,
    RedirectPeer,
    TaskStorageGet,
    TaskStorageDelete,
    GetCurrentTaskBtf,
    BprmOptsSet,
    KtimeGetCoarseNs,
    ImaInodeHash,
    SockFromFile,
    CheckMtu,
    ForEachMapElem,
    Snprintf,
    SysBpf,
    BtfFindByNameKind,
    SysClose,
    TimerInit,
    TimerSetCallback,
    TimerStart,
    TimerCancel,
    GetFuncIp,
    GetAttachCookie,
    TaskPtRegs,

    __BpfFuncMaxId, // Sentinel
}
