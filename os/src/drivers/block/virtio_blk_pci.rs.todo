use core::{
    alloc::Layout,
    ptr::{self, NonNull},
};

use buddy_system_allocator::FrameAllocator;
use lazy_static::lazy_static;

use alloc::{
    alloc::{alloc_zeroed, dealloc, handle_alloc_error},
    boxed::Box,
    vec::Vec,
};
use virtio_drivers::{
    device::{self, blk::VirtIOBlk},
    transport::pci::{
        bus::{Cam, PciRoot},
        PciTransport,
    },
    BufferDirection, Hal,
};

use crate::{arch::config::PAGE_SIZE, mutex::SpinNoIrqLock};

use zerocopy::FromZeroes;

use super::block_dev::BlockDevice;

pub struct VirtIOBlock(SpinNoIrqLock<VirtIOBlk<HalImpl, PciTransport>>);

pub struct HalImpl;

unsafe impl Hal for HalImpl {
    fn dma_alloc(pages: usize, _direction: BufferDirection) -> (usize, NonNull<u8>) {
        assert_ne!(pages, 0);
        let layout = Layout::from_size_align(pages * PAGE_SIZE, PAGE_SIZE).unwrap();
        // Safe because the size and alignment of the layout are non-zero.
        let ptr = unsafe { alloc_zeroed(layout) };
        if let Some(ptr) = NonNull::new(ptr) {
            (ptr.as_ptr() as usize, ptr)
        } else {
            handle_alloc_error(layout);
        }
    }

    unsafe fn dma_dealloc(_paddr: usize, vaddr: NonNull<u8>, pages: usize) -> i32 {
        assert_ne!(pages, 0);
        let layout = Layout::from_size_align(pages * PAGE_SIZE, PAGE_SIZE).unwrap();
        // Safe because the layout is the same as was used when the memory was allocated by
        // `dma_alloc` above.
        unsafe {
            dealloc(vaddr.as_ptr(), layout);
        }
        0
    }

    unsafe fn mmio_phys_to_virt(paddr: usize, _size: usize) -> NonNull<u8> {
        NonNull::new(paddr as _).unwrap()
    }

    unsafe fn share(buffer: NonNull<[u8]>, direction: BufferDirection) -> usize {
        assert_ne!(buffer.len(), 0);
        // To ensure that the driver is handling and unsharing buffers properly, allocate a new
        // buffer and copy to it if appropriate.
        let mut shared_buffer = u8::new_box_slice_zeroed(buffer.len());
        if let BufferDirection::DriverToDevice | BufferDirection::Both = direction {
            unsafe {
                buffer
                    .as_ptr()
                    .cast::<u8>()
                    .copy_to(shared_buffer.as_mut_ptr(), buffer.len());
            }
        }
        let vaddr = Box::into_raw(shared_buffer) as *mut u8 as usize;
        // Nothing to do, as the host already has access to all memory.
        virt_to_phys(vaddr)
    }

    unsafe fn unshare(paddr: usize, buffer: NonNull<[u8]>, direction: BufferDirection) {
        assert_ne!(buffer.len(), 0);
        assert_ne!(paddr, 0);
        let vaddr = phys_to_virt(paddr);
        let shared_buffer = unsafe {
            Box::from_raw(ptr::slice_from_raw_parts_mut(
                vaddr as *mut u8,
                buffer.len(),
            ))
        };
        if let BufferDirection::DeviceToDriver | BufferDirection::Both = direction {
            unsafe {
                buffer
                    .as_ptr()
                    .cast::<u8>()
                    .copy_from(shared_buffer.as_ptr(), buffer.len());
            }
        }
    }
}

fn virt_to_phys(vaddr: usize) -> usize {
    vaddr
}

fn phys_to_virt(paddr: usize) -> usize {
    paddr
}

lazy_static! {
    static ref QUEUE_FRAMES: SpinNoIrqLock<Vec<FrameAllocator>> = SpinNoIrqLock::new(Vec::new());
}

impl BlockDevice for VirtIOBlock {
    fn read_blocks(&self, block_id: usize, buf: &mut [u8]) {
        self.0
            .lock()
            .read_blocks(block_id, buf)
            .expect("Error when reading VirtIOBlk");
    }
    fn write_blocks(&self, block_id: usize, buf: &[u8]) {
        self.0
            .lock()
            .write_blocks(block_id, buf)
            .expect("Error when writing VirtIOBlk");
    }
}

const PCI_MMIO_BASE: usize = 0x40000000;

impl VirtIOBlock {
    #[allow(unused)]
    pub fn new() -> Self {
        unsafe {
            let pri_root = PciRoot::new(PCI_MMIO_BASE as *mut u8, Cam::MmioCam);
            // let device_function = 
            // let transport = PciTransport::new(0x1000, 0x1, 0x0, 0x0).unwrap();
            // let device = VirtIOBlk::<HalImpl, _>::new(transport).unwrap();
            // VirtIOBlock(SpinNoIrqLock::new(device));
            todo!();
        }
    }
}
